package org.redbyte.domain.usecase

import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.redbyte.data.CalendarRepository
import org.redbyte.domain.model.*

class GetProductionCalendarUseCase(
    private val repository: CalendarRepository
) {
    private val prettyJson = Json { prettyPrint = true }

    operator fun invoke(year: Int, mode: DisplayMode): String {
        val calendar = repository.getProductionCalendar(year)
        return when (mode) {
            DisplayMode.JSON -> toJson(calendar)
            DisplayMode.PRETTY -> toPrettyTable(calendar)
        }
    }

    operator fun invoke(year: Int, monthName: String): String {
        val calendar = repository.getProductionCalendar(year)
        val month = calendar.filterByMonth(monthName)
            ?: throw RuntimeException("$monthName –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –º–µ—Å—è—Ü–∞ –Ω–∞ –æ—à–∏–±–∫–∏")
        return toPrettyMonth(month)
    }

    operator fun invoke(year: Int): String {
        val calendar = repository.getProductionCalendar(year)
        val month = calendar.currentMonth()
            ?: throw RuntimeException("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
        return toPrettyMonth(month)
    }

    private fun toJson(calendar: ProductionCalendar): String {
        return prettyJson.encodeToString(calendar)
    }

    private fun toPrettyMonth(month: MonthData): String {
        return buildString {
            appendLine("üìÖ ${month.monthName}")
            appendLine("=".repeat(30))
            appendLine("üéâ –í—ã—Ö–æ–¥–Ω—ã–µ: ${month.holidays.joinToString(", ")}")
            if (month.preHolidays.isNotEmpty()) {
                appendLine("‚è≥ –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –¥–Ω–∏: ${month.preHolidays.joinToString(", ")}")
            }
        }
    }

    private fun toPrettyTable(calendar: ProductionCalendar): String {
        val builder = StringBuilder()
        builder.appendLine("üìÖ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ${calendar.year}")
        builder.appendLine("*".repeat(50))

        calendar.months.forEach { month ->
            builder.appendLine("\nüîπ ${month.monthName}")
            if (month.holidays.isNotEmpty()) {
                builder.appendLine("üéâ –í—ã—Ö–æ–¥–Ω—ã–µ: ${month.holidays.joinToString(", ")}")
            }

            if (month.preHolidays.isNotEmpty()) {
                builder.appendLine("‚è≥ –°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–µ –¥–Ω–∏: ${month.preHolidays.joinToString(", ")}")
            }
            builder.appendLine("-".repeat(30))
        }

        return builder.toString()
    }
}